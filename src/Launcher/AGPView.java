package Launcher;

/**
 * @author Harnick Khera - P13233249
 *
 */

import java.awt.event.ActionListener;
import Model.*;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.FileDialog;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.File;
import java.util.ArrayList;
import java.util.Random;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JLabel;

public class AGPView extends javax.swing.JFrame implements ActionListener, KeyListener {
    
    //class variables
    private  boolean started;
    private  boolean firstGeneration;
    private  DataSystem temp;
    private ImageGenerator ig;
    private int canvasHeight;
    private int canvasWidth;
    private ArrayList<DataSystem> history;
    private int historyItem;
    
    
    /**
     * Creates new instances of the art generation program
     */
    public AGPView() {
        started = false;
        firstGeneration = true;
        temp = new DataSystem();
        this.setTitle("Art Generation Program - P13233249");
        ig = new ImageGenerator(temp);
        initComponents();
        history = new ArrayList<DataSystem>();
        historyItem = 0;
    }
    
    /**
     * methods for adding items to the history
     * @param d data system that will be added
     */
    public void addtohistory(DataSystem d){
        history.add(historyItem, d);
        historyItem = historyItem +1;
        if(historyItem<=history.size()){
            int diff = historyItem - history.size();
            for(int it = 1; it<=diff; it++){
                history.remove(historyItem+it);
            }
        }
    }
    
    /**
     * grab the last version of the history and decrement the history item
     * @return the previous item in the history
     */
    public DataSystem roleBackHistory(){
        
        
        DataSystem undo = history.get(historyItem-1);
        historyItem = historyItem -1;
        return undo;
    }
    
    /**
     *  grab the newer version of the history and increment the history item
     * @return the next item in the history
     */
    public DataSystem redoHistory(){
        
        historyItem = historyItem +1;
        DataSystem redo = history.get(historyItem);
        return redo;
        
    }
    
    /**
     * Code generated by the netbeans GUI builder
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        aboutDialog = new javax.swing.JDialog();
        about = new javax.swing.JLabel();
        about2 = new javax.swing.JLabel();
        Tabs = new javax.swing.JTabbedPane();
        SessionTab = new javax.swing.JPanel();
        sessionLabel = new javax.swing.JLabel();
        sessionComboBox = new javax.swing.JComboBox<>();
        widthBox = new javax.swing.JTextField();
        widthLabel = new javax.swing.JLabel();
        heightLabel = new javax.swing.JLabel();
        beginButton = new javax.swing.JButton();
        heightBox = new javax.swing.JTextField();
        algorithmSettings = new javax.swing.JPanel();
        AlgorithmSettngLabel = new java.awt.Label();
        SymmetryLabel = new javax.swing.JLabel();
        SymmetryBox = new javax.swing.JComboBox<>();
        rotationLabel = new javax.swing.JLabel();
        rotationBox = new javax.swing.JComboBox<>();
        wolframLabel = new javax.swing.JLabel();
        wolframTextField = new java.awt.TextField();
        linesField = new java.awt.TextField();
        AngleField = new java.awt.TextField();
        LengthField = new java.awt.TextField();
        linesLabel = new javax.swing.JLabel();
        AngleLabel = new javax.swing.JLabel();
        LengthLabel = new javax.swing.JLabel();
        GrowthLabel = new javax.swing.JLabel();
        GrowthField = new java.awt.TextField();
        algorithmLabel = new javax.swing.JLabel();
        algorithmComboBox = new javax.swing.JComboBox<>();
        applyAlgorithm = new javax.swing.JButton();
        numberLinesLabel = new javax.swing.JLabel();
        randomizerLabel = new javax.swing.JLabel();
        RandomizerBox = new javax.swing.JComboBox<>();
        TileWidthField = new java.awt.TextField();
        TileHeightField = new java.awt.TextField();
        tileWidth = new javax.swing.JLabel();
        startXField = new java.awt.TextField();
        TileHeight = new javax.swing.JLabel();
        Startx = new javax.swing.JLabel();
        starty = new javax.swing.JLabel();
        startYField = new java.awt.TextField();
        tileLabel = new javax.swing.JLabel();
        ModifierLabel = new javax.swing.JLabel();
        ModifierField = new java.awt.TextField();
        wolframGridLabel = new javax.swing.JLabel();
        wolframGridBox = new javax.swing.JComboBox<>();
        wolframStartingPoints = new javax.swing.JLabel();
        startingPointsField = new java.awt.TextField();
        avgLabel = new javax.swing.JLabel();
        avgBox = new javax.swing.JComboBox<>();
        OutputTab = new javax.swing.JPanel();
        scrollPane = new java.awt.ScrollPane();
        canvasOutput = ig;
        Menu = new javax.swing.JMenuBar();
        File = new javax.swing.JMenu();
        clearSessionItem = new javax.swing.JMenuItem();
        saveImageItem = new javax.swing.JMenuItem();
        loadItem = new javax.swing.JMenuItem();
        undoItem = new javax.swing.JMenuItem();
        redoItem = new javax.swing.JMenuItem();
        exitItem = new javax.swing.JMenuItem();
        Misc = new javax.swing.JMenu();
        About = new javax.swing.JMenuItem();

        about.setText("This Program was created by Harnick Khera - P13233249");

        about2.setText("The AGP Produces Artistic Images Using a Variety of Algorithms");

        javax.swing.GroupLayout aboutDialogLayout = new javax.swing.GroupLayout(aboutDialog.getContentPane());
        aboutDialog.getContentPane().setLayout(aboutDialogLayout);
        aboutDialogLayout.setHorizontalGroup(
            aboutDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aboutDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(aboutDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(about)
                    .addComponent(about2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        aboutDialogLayout.setVerticalGroup(
            aboutDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aboutDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(about)
                .addGap(18, 18, 18)
                .addComponent(about2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImages(null);
        setName("Art Generation Program"); // NOI18N

        SessionTab.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        sessionLabel.setText("Session Type");

        sessionComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Manual Session", "Automated Session"}));

        widthBox.setText("");
        widthBox.addKeyListener(this);

        widthLabel.setText("Image Width");

        heightLabel.setText("Image Height");

        beginButton.setText("Begin Session");
        beginButton.addActionListener(this);

        heightBox.setText("");
        heightBox.addKeyListener(this);

        javax.swing.GroupLayout SessionTabLayout = new javax.swing.GroupLayout(SessionTab);
        SessionTab.setLayout(SessionTabLayout);
        SessionTabLayout.setHorizontalGroup(
            SessionTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SessionTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(SessionTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SessionTabLayout.createSequentialGroup()
                        .addComponent(widthLabel)
                        .addGap(60, 60, 60)
                        .addComponent(widthBox, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(heightLabel)
                        .addGap(60, 60, 60)
                        .addComponent(heightBox, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(SessionTabLayout.createSequentialGroup()
                        .addComponent(sessionLabel)
                        .addGap(60, 60, 60)
                        .addComponent(sessionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(beginButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(778, Short.MAX_VALUE))
        );
        SessionTabLayout.setVerticalGroup(
            SessionTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SessionTabLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(SessionTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(widthBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(heightLabel)
                    .addComponent(heightBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(widthLabel))
                .addGap(17, 17, 17)
                .addGroup(SessionTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sessionLabel)
                    .addComponent(sessionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(beginButton))
                .addContainerGap(488, Short.MAX_VALUE))
        );

        Tabs.addTab("Session Setup", SessionTab);

        algorithmSettings.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        AlgorithmSettngLabel.setText("Algorithm Settings");

        SymmetryLabel.setText("Symmetry Algorithm Setting");

        SymmetryBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {
            "Reflect horizontally from top to bottom",
            "Reflect horizontally from bottom to top",
            "Reflect vertically from left to right",
            "Reflect vertically from right to left",
            "Reflect horizontally from left to centre",
            "Reflect horizontally from centre to left",
            "Reflect horizontally from center to right",
            "Reflect horizontally from right to centre",
            "Reflect vertically from top to centre",
            "Reflect vertically from centre to top",
            "Reflect vertically from center to bottom",
            "Reflect vertically from bottom to centre",
            "Reflect diagonally",
            "Reflect diagonally alternative"}));

rotationLabel.setText("Rotatation Algorithm Setting");

rotationBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "90 Degrees", "180 Degrees", "270 Degrees"}));

wolframLabel.setText("Wolfram Cellular Automata Rule");

wolframTextField.setText("0");
wolframTextField.addKeyListener(this);

linesField.setText("0");
linesField.addKeyListener(this);

AngleField.setText("0");
AngleField.addKeyListener(this);

LengthField.setText("0");
LengthField.addKeyListener(this);

linesLabel.setText("Lines Algorithm Settings");

AngleLabel.setText("Angle");

LengthLabel.setText("Length");

GrowthLabel.setText("Growth");

GrowthField.setText("0");
GrowthField.addKeyListener(this);

algorithmLabel.setText("Select Algorithm");

algorithmComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Random Formula", "Random Formula with Gamma", "Randomized Solid Color",
    "Randomized Wolfram Cellular Automata", "Wolfram Cellular Automata", "2d Cellular Automata 3x3 area", "2d Cellular Automata 5x5 area", "Noise Generator", "Invert", "Apply Symmertry",
    "Rotate Image", "Line System", "Tile System", "Randomizer", "Averaging Function"}));

    applyAlgorithm.setText("Apply Algorithm");
    applyAlgorithm.addActionListener(this);

    numberLinesLabel.setText("Number of Lines");

    randomizerLabel.setText("Randomizer Setting");

    RandomizerBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Randomize Width Pixel Data",
        "Randomize Height Pixel Data", "Randomize Pixel Data"}));
RandomizerBox.addActionListener(this);

TileWidthField.setText("0");
TileWidthField.addKeyListener(this);

TileHeightField.setText("0");
TileHeightField.addKeyListener(this);

tileWidth.setText("Tile Width");

startXField.setText("0");
startXField.addKeyListener(this);

TileHeight.setText("Tile Height");

Startx.setText("Start x");

starty.setText("Start y");

startYField.setText("0");
startYField.addKeyListener(this);

tileLabel.setText("Tile Settings");

ModifierLabel.setText("Modifier");

ModifierField.setText("0");
ModifierField.addKeyListener(this);

wolframGridLabel.setText("Wolfram Starting Grid");

wolframGridBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "No", "Yes", "Custom Start"}));

wolframStartingPoints.setText("Wolfram Starting Points");

startingPointsField.setText("0");
startingPointsField.addKeyListener(this);

avgLabel.setText("Averaging Algorithm");

avgBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Avarage Width",
"Avarage Height", "Blur Image"}));
avgBox.addActionListener(this);

javax.swing.GroupLayout algorithmSettingsLayout = new javax.swing.GroupLayout(algorithmSettings);
algorithmSettings.setLayout(algorithmSettingsLayout);
algorithmSettingsLayout.setHorizontalGroup(
    algorithmSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
    .addGroup(algorithmSettingsLayout.createSequentialGroup()
        .addGap(20, 20, 20)
        .addGroup(algorithmSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(algorithmSettingsLayout.createSequentialGroup()
                .addComponent(avgLabel)
                .addGap(40, 40, 40)
                .addComponent(avgBox, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(applyAlgorithm, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(algorithmSettingsLayout.createSequentialGroup()
                .addComponent(tileLabel)
                .addGap(79, 79, 79)
                .addComponent(tileWidth)
                .addGap(20, 20, 20)
                .addComponent(TileWidthField, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(TileHeight)
                .addGap(20, 20, 20)
                .addComponent(TileHeightField, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(Startx, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(startXField, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(starty, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(startYField, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(algorithmSettingsLayout.createSequentialGroup()
                .addComponent(randomizerLabel)
                .addGap(44, 44, 44)
                .addComponent(RandomizerBox, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(algorithmSettingsLayout.createSequentialGroup()
                .addComponent(linesLabel)
                .addGap(40, 40, 40)
                .addComponent(numberLinesLabel)
                .addGap(20, 20, 20)
                .addComponent(linesField, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(AngleLabel)
                .addGap(20, 20, 20)
                .addComponent(AngleField, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(LengthLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(LengthField, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(GrowthLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(GrowthField, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(ModifierLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(ModifierField, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(algorithmSettingsLayout.createSequentialGroup()
                .addGroup(algorithmSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SymmetryLabel)
                    .addComponent(rotationLabel)
                    .addComponent(wolframLabel)
                    .addComponent(algorithmLabel)
                    .addComponent(AlgorithmSettngLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(algorithmSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SymmetryBox, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(algorithmComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(algorithmSettingsLayout.createSequentialGroup()
                        .addGroup(algorithmSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(wolframTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(rotationBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(wolframGridLabel)
                        .addGap(18, 18, 18)
                        .addComponent(wolframGridBox, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(wolframStartingPoints)
                        .addGap(20, 20, 20)
                        .addComponent(startingPointsField, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)))))
        .addContainerGap(214, Short.MAX_VALUE))
    );
    algorithmSettingsLayout.setVerticalGroup(
        algorithmSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(algorithmSettingsLayout.createSequentialGroup()
            .addGap(30, 30, 30)
            .addComponent(AlgorithmSettngLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(algorithmSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(algorithmLabel)
                .addComponent(algorithmComboBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addGroup(algorithmSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(SymmetryLabel)
                .addComponent(SymmetryBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addGroup(algorithmSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(rotationLabel)
                .addComponent(rotationBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addGroup(algorithmSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(wolframLabel)
                .addComponent(wolframTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(startingPointsField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(algorithmSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(wolframGridLabel)
                    .addComponent(wolframGridBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(wolframStartingPoints)))
            .addGap(18, 18, 18)
            .addGroup(algorithmSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(algorithmSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(linesLabel)
                    .addComponent(numberLinesLabel))
                .addComponent(linesField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(LengthField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(AngleLabel)
                .addComponent(AngleField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(LengthLabel)
                .addComponent(GrowthField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(GrowthLabel)
                .addComponent(ModifierLabel)
                .addComponent(ModifierField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addGroup(algorithmSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(randomizerLabel)
                .addComponent(RandomizerBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addGroup(algorithmSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(algorithmSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tileWidth)
                    .addComponent(tileLabel))
                .addComponent(TileWidthField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(startXField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(TileHeight)
                .addComponent(TileHeightField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(Startx)
                .addComponent(startYField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(starty))
            .addGap(18, 18, 18)
            .addGroup(algorithmSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(avgLabel)
                .addComponent(avgBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addComponent(applyAlgorithm)
            .addGap(159, 159, 159))
    );

    Tabs.addTab("Algorithm Settings", algorithmSettings);

    canvasOutput.setForeground(new java.awt.Color(255, 255, 255));
    scrollPane.add(canvasOutput);

    javax.swing.GroupLayout OutputTabLayout = new javax.swing.GroupLayout(OutputTab);
    OutputTab.setLayout(OutputTabLayout);
    OutputTabLayout.setHorizontalGroup(
        OutputTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(OutputTabLayout.createSequentialGroup()
            .addGap(20, 20, 20)
            .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGap(20, 20, 20))
    );
    OutputTabLayout.setVerticalGroup(
        OutputTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(OutputTabLayout.createSequentialGroup()
            .addGap(20, 20, 20)
            .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGap(20, 20, 20))
    );

    Tabs.addTab("Output", OutputTab);

    File.setMnemonic('F');
    File.setText("File");

    clearSessionItem.setMnemonic('C');
    clearSessionItem.setText("Clear Session");
    clearSessionItem.addActionListener(this);
    File.add(clearSessionItem);

    saveImageItem.setMnemonic('S');
    saveImageItem.setText("Save Image");
    saveImageItem.addActionListener(this);
    File.add(saveImageItem);

    loadItem.setMnemonic('L');
    loadItem.setText("Load Image");
    loadItem.addActionListener(this);
    File.add(loadItem);

    undoItem.setMnemonic('Z');
    undoItem.setText("Undo");
    undoItem.addActionListener(this);
    File.add(undoItem);

    redoItem.setMnemonic('Y');
    redoItem.setText("Redo");
    redoItem.addActionListener(this);
    File.add(redoItem);

    exitItem.setMnemonic('E');
    exitItem.setText("Exit");
    exitItem.addActionListener(this);
    File.add(exitItem);

    Menu.add(File);

    Misc.setMnemonic('M');
    Misc.setText("Misc");

    About.setMnemonic('A');
    About.setText("About");
    About.addActionListener(this);
    Misc.add(About);

    Menu.add(Misc);

    setJMenuBar(Menu);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(Tabs)
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(Tabs)
    );

    pack();
    }

    // Code for dispatching events from components to event handlers.

    public void actionPerformed(java.awt.event.ActionEvent evt) {
        if (evt.getSource() == beginButton) {
            AGPView.this.beginButtonActionPerformed(evt);
        }
        else if (evt.getSource() == applyAlgorithm) {
            AGPView.this.applyAlgorithmActionPerformed(evt);
        }
        else if (evt.getSource() == RandomizerBox) {
            AGPView.this.RandomizerBoxActionPerformed(evt);
        }
        else if (evt.getSource() == avgBox) {
            AGPView.this.avgBoxActionPerformed(evt);
        }
        else if (evt.getSource() == clearSessionItem) {
            AGPView.this.clearSessionItemActionPerformed(evt);
        }
        else if (evt.getSource() == saveImageItem) {
            AGPView.this.saveImageItemActionPerformed(evt);
        }
        else if (evt.getSource() == loadItem) {
            AGPView.this.loadItemActionPerformed(evt);
        }
        else if (evt.getSource() == undoItem) {
            AGPView.this.undoItemActionPerformed(evt);
        }
        else if (evt.getSource() == redoItem) {
            AGPView.this.redoItemActionPerformed(evt);
        }
        else if (evt.getSource() == exitItem) {
            AGPView.this.exitItemActionPerformed(evt);
        }
        else if (evt.getSource() == About) {
            AGPView.this.AboutActionPerformed(evt);
        }
    }

    public void keyPressed(java.awt.event.KeyEvent evt) {
    }

    public void keyReleased(java.awt.event.KeyEvent evt) {
    }

    public void keyTyped(java.awt.event.KeyEvent evt) {
        if (evt.getSource() == widthBox) {
            AGPView.this.widthBoxKeyTyped(evt);
        }
        else if (evt.getSource() == heightBox) {
            AGPView.this.heightBoxKeyTyped(evt);
        }
        else if (evt.getSource() == wolframTextField) {
            AGPView.this.wolframTextFieldKeyTyped(evt);
        }
        else if (evt.getSource() == linesField) {
            AGPView.this.linesFieldKeyTyped(evt);
        }
        else if (evt.getSource() == AngleField) {
            AGPView.this.AngleFieldKeyTyped(evt);
        }
        else if (evt.getSource() == LengthField) {
            AGPView.this.LengthFieldKeyTyped(evt);
        }
        else if (evt.getSource() == GrowthField) {
            AGPView.this.GrowthFieldKeyTyped(evt);
        }
        else if (evt.getSource() == TileWidthField) {
            AGPView.this.TileWidthFieldKeyTyped(evt);
        }
        else if (evt.getSource() == TileHeightField) {
            AGPView.this.TileHeightFieldKeyTyped(evt);
        }
        else if (evt.getSource() == startXField) {
            AGPView.this.startXFieldKeyTyped(evt);
        }
        else if (evt.getSource() == startYField) {
            AGPView.this.startYFieldKeyTyped(evt);
        }
        else if (evt.getSource() == ModifierField) {
            AGPView.this.ModifierFieldKeyTyped(evt);
        }
        else if (evt.getSource() == startingPointsField) {
            AGPView.this.startingPointsFieldKeyTyped(evt);
        }
    }// </editor-fold>//GEN-END:initComponents
    
    private void heightBoxKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_heightBoxKeyTyped
        // TODO add your handling code here:
        //test for now
        char c = evt.getKeyChar();
        if ( ((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)) {
            evt.consume();  // ignore event
        }
    }//GEN-LAST:event_heightBoxKeyTyped
    
    
    /**
     * logic related to the beginning of a new session
     * @param evt 
     */
    private void beginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_beginButtonActionPerformed
        // TODO add your handling code here:
        System.out.println("Test");
        int height, width;
        
        if(started == false){
            //converts from string to int
            canvasWidth = Integer.parseInt(widthBox.getText());
            canvasHeight = Integer.parseInt(heightBox.getText());
            
            if(sessionComboBox.getSelectedIndex()== 1){
                int iteration = 0;
                Random r = new Random();
                int n = r.nextInt(10)+5;
                while(iteration<n){
                    DataSystem out = automateSession();
                    
                    //creates an output that is the same as the last generated image
                    temp = out.copySystem(out);
                    
                    ig.setData(temp);
                    iteration++;
                }
                this.started = true;
                this.Tabs.setSelectedIndex(2);
                System.out.println("End Automation");
                
                
            }
            else if(sessionComboBox.getSelectedIndex()== 0){
                this.started = true;
                this.Tabs.setSelectedIndex(1);
            }
        }
        
    }//GEN-LAST:event_beginButtonActionPerformed
    /**
     * filters entered code
     */
    private void widthBoxKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_widthBoxKeyTyped
        // TODO add your handling code here:
        
        //test for now
        char c = evt.getKeyChar();
        if ( ((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)) {
            evt.consume();  // ignore event
        }
    }//GEN-LAST:event_widthBoxKeyTyped
    
    /**
     * exits the system
     */
    private void exitItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitItemActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitItemActionPerformed
    
    /**
     * clears the system
     */
    private void clearSessionItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearSessionItemActionPerformed
        // TODO add your handling code here:
        reset();
    }//GEN-LAST:event_clearSessionItemActionPerformed
    
    /**
     * save image to the file system using a string generated from the file dialog
     */
    private void saveImageItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveImageItemActionPerformed
        // TODO add your handling code here:
        String save = saveImageFile(new Frame(), "Save Image...", ".\\", "*.png");
        ig.saveImg(save,0); 
    }//GEN-LAST:event_saveImageItemActionPerformed
    
    /**
     * generates a file dialog used to create a the file path and file name
     * @param f
     * @param title
     * @param defDir
     * @param fileType
     * @return string of gile path and name
     */
    public String saveImageFile(Frame f, String title, String defDir, String fileType) {
        FileDialog fd = new FileDialog(f, title,    FileDialog.SAVE);
        fd.setFile(fileType);
        fd.setDirectory(defDir);
        fd.setLocation(50, 50);
        fd.show();
        
        return fd.getDirectory()+fd.getFile();
    }
    
    /**
     * redoes an action
     */
    private void redoItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoItemActionPerformed
        // TODO add your handling code here:
        
        if(historyItem+1<history.size()){
            temp = redoHistory();
            ig.setData(temp);
            ig.repaint();
            firstGeneration = false;
        }
    }//GEN-LAST:event_redoItemActionPerformed
    /**
     * undoes an action
     */
    private void undoItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoItemActionPerformed
        // TODO add your handling code here:
        if(historyItem-1>=0 && history.size()>0){
            temp = roleBackHistory();
            ig.setData(temp);
            ig.repaint();
        }
        
        if(historyItem == 0){
            firstGeneration = true;
        }
        
    }//GEN-LAST:event_undoItemActionPerformed
    
    /**
     * loads an image
     */
    private void loadItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadItemActionPerformed
        // TODO add your handling code here:
        
        String importfile = loadImageFile(new Frame(), "Load Image...", ".\\", "");
        temp = ig.imagetoDataSystem(importfile);
        ig.setData(temp);
        firstGeneration  = false;
        canvasWidth = temp.getWidth();
        canvasHeight = temp.getHeight();
        ig.repaint();
    }//GEN-LAST:event_loadItemActionPerformed
    
    private void avgBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_avgBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_avgBoxActionPerformed
    
    /**
     * filters entered code
     */
    private void startingPointsFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_startingPointsFieldKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if ( ((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)) {
            evt.consume();  // ignore event
        }
    }//GEN-LAST:event_startingPointsFieldKeyTyped
    /**
     * filters entered code
     */
    private void ModifierFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ModifierFieldKeyTyped
        // TODO add your handling code here:
        
        char c = evt.getKeyChar();
        if ( ((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE) && (c != KeyEvent.VK_PERIOD)) {
            
            evt.consume();  // ignore event
            
        }
        if(!ModifierField.getText().isEmpty()){
            double t = Double.parseDouble(ModifierField.getText());
            if(t>1.0){
                evt.consume();  // ignore event
                ModifierField.setText("1.0");
            }
        }
    }//GEN-LAST:event_ModifierFieldKeyTyped
    /**
     * filters entered code
     */
    private void startYFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_startYFieldKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if ( ((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)) {
            evt.consume();  // ignore event
        }
    }//GEN-LAST:event_startYFieldKeyTyped
    /**
     * filters entered code
     */
    private void startXFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_startXFieldKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if ( ((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)) {
            evt.consume();  // ignore event
        }
    }//GEN-LAST:event_startXFieldKeyTyped
    /**
     * filters entered code
     */
    private void TileHeightFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TileHeightFieldKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if ( ((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)) {
            evt.consume();  // ignore event
        }
    }//GEN-LAST:event_TileHeightFieldKeyTyped
    /**
     * filters entered code
     */
    private void TileWidthFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TileWidthFieldKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if ( ((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)) {
            evt.consume();  // ignore event
        }
    }//GEN-LAST:event_TileWidthFieldKeyTyped
    
    private void RandomizerBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RandomizerBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RandomizerBoxActionPerformed
    /**
     * applies the selected algorithm and updates the image generator
     */
    private void applyAlgorithmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyAlgorithmActionPerformed
        DataSystem out = manualSession();
        history.add(temp.copySystem(temp));
        //creates an output that is the same as the last generated image
        temp = out.copySystem(out);
        
        ig.setData(out);
        //ig.repaint();
        this.started = true;
        this.Tabs.setSelectedIndex(1);
        System.out.println("End Manual");
    }//GEN-LAST:event_applyAlgorithmActionPerformed
    /**
     * filters entered code
     */
    private void GrowthFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_GrowthFieldKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if ( ((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)) {
            evt.consume();  // ignore event
        }
    }//GEN-LAST:event_GrowthFieldKeyTyped
    /**
     * filters entered code
     */
    private void LengthFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_LengthFieldKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if ( ((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)) {
            evt.consume();  // ignore event
        }
    }//GEN-LAST:event_LengthFieldKeyTyped
    /**
     * filters entered code
     */
    private void AngleFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AngleFieldKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if ( ((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)) {
            evt.consume();  // ignore event
        }
    }//GEN-LAST:event_AngleFieldKeyTyped
    /**
     * filters entered code
     */
    private void linesFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_linesFieldKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if ( ((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)) {
            evt.consume();  // ignore event
        }
    }//GEN-LAST:event_linesFieldKeyTyped
    /**
     * filters entered code
     */
    private void wolframTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_wolframTextFieldKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if ( ((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)) {
            
            evt.consume();  // ignore event
            
        }
        if(!wolframTextField.getText().isEmpty()){
            int t = Integer.parseInt(wolframTextField.getText());
            if(t>255){
                evt.consume();  // ignore event
                wolframTextField.setText("255");
            }
        }
    }//GEN-LAST:event_wolframTextFieldKeyTyped
    /**
     * opens an about dialog box
     */
    private void AboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AboutActionPerformed
        // TODO add your handling code here:
        aboutDialog.setSize(400, 140);
        aboutDialog.setTitle("About");
        this.aboutDialog.setVisible(true);
        
    }//GEN-LAST:event_AboutActionPerformed
    /**
     *creates a file dialog that constructs a string with the path and file name
     * @return string containing path and name
     */
    public String loadImageFile(Frame f, String title, String defDir, String fileType) {
        FileDialog fd = new FileDialog(f, title,    FileDialog.LOAD);
        fd.setFile(fileType);
        fd.setDirectory(defDir);
        fd.setLocation(50, 50);
        fd.show();
        
        return fd.getDirectory()+fd.getFile();
    }
    
    /**
     * resets the core variables and requests memory garbage cleanup
     */
    public void reset(){
        firstGeneration = true;
        started = false;
        history.clear();
        historyItem = 0;
        temp = new DataSystem();
        System.gc();
        ig.setData(temp);
        ig.repaint();
    }
    
    /**
     * selects an integer and sends it to the automate function
     * @return returns the automated generation
     */
    public DataSystem automateSession(){
        Random r = new Random();
        int mode = 0;
        
        if(firstGeneration == true){
            mode = r.nextInt(8);
        }
        else if (firstGeneration  == false){
            mode = r.nextInt(13);
        }
        
        DataSystem tempData = autoComputeImage(mode);
        
        return tempData;
    }
    /**
     * grabs the selected algorithm and executes it
     * @return the result of the manual allocation
     */
    public DataSystem manualSession(){
        
        int mode = algorithmComboBox.getSelectedIndex();
        
        DataSystem tempData =  computeImage(mode, temp);
        return tempData;
        
    }
    /**
     * executes the selected algorithm
     * @param mode integer value of selected algorithm
     * @param existing data system 
     * @return the generated algorithm output
     */
    public DataSystem computeImage(int mode, DataSystem existing){
        
        DataSystem tempData = new DataSystem(canvasWidth, canvasHeight);
        
        Random r = new Random();
        if(mode == 0){
            RandFormula randF = new RandFormula(tempData);
            randF.updateDS();
            if(firstGeneration == true){
                tempData = randF.returnData();
                firstGeneration =false;
            }
            else if (firstGeneration == false){
                tempData = tempData.mergeSystems(existing, randF.returnData());
            }
        }
        else if (mode == 1){
            RandFormula randF = new RandFormula(tempData);
            randF.updateDSGamma();
            
            if(firstGeneration == true){
                tempData = randF.returnData();
                firstGeneration =false;
            }
            else if (firstGeneration == false){
                tempData = tempData.mergeSystems(existing, randF.returnData());
            }
            
        }
        else if (mode == 2){
            
            if(firstGeneration == true){
                tempData.setSolidColor(new Color(r.nextInt(256),r.nextInt(256),r.nextInt(256)));
                firstGeneration =false;
            }
            else if (firstGeneration == false){
                tempData.setSolidColor(new Color(r.nextInt(256),r.nextInt(256),r.nextInt(256)));
                tempData = tempData.mergeSystems(existing, tempData);
            }
            
            
        }
        else if( mode == 3){
            
            if(firstGeneration == true){
                tempData.setSolidColor(new Color(r.nextInt(256),r.nextInt(256),r.nextInt(256)));
                firstGeneration =false;
            }
            else if (firstGeneration == false){
                tempData  = existing;
            }
            
            CellularAutomata ca = new CellularAutomata(canvasWidth, canvasHeight,tempData);
            ca.executeWolframRand();
            tempData = ca.getOutput();
        }
        else if( mode == 4){
            int t = Integer.parseInt(wolframTextField.getText());
            if(t >256){
                t = 255;
            }
            
            if(firstGeneration == true){
                tempData.setSolidColor(new Color(r.nextInt(256),r.nextInt(256),r.nextInt(256)));
                firstGeneration =false;
            }
            else if (firstGeneration == false){
                tempData  = existing;
            }
            
            CellularAutomata ca = new CellularAutomata(canvasWidth, canvasHeight,tempData);
            
            if(wolframGridBox.getSelectedIndex() ==0){
                ca.executeWolframRules(t);
            }
            else if(wolframGridBox.getSelectedIndex()==1){
                ca.executeWolframRules(t, true);
            }
            
            else if(wolframGridBox.getSelectedIndex() == 2){
                int startnumbers = Integer.parseInt(startingPointsField.getText());
                if(startnumbers<= 0){startnumbers =1;}
                
                ca.executeWolframRules(t,startnumbers);
            }
            tempData = ca.getOutput();
        }
        else if( mode == 5){
            if(firstGeneration == true){
                tempData.setSolidColor(new Color(r.nextInt(256),r.nextInt(256),r.nextInt(256)));
                firstGeneration =false;
            }
            else if (firstGeneration == false){
                tempData  = existing;
            }
            CellularAutomata ca = new CellularAutomata(canvasWidth, canvasHeight,tempData);
            ca.execute2D(100);
            tempData = ca.getOutput();
        }
        else if( mode == 6){
            
            if(firstGeneration == true){
                tempData.setSolidColor(new Color(r.nextInt(256),r.nextInt(256),r.nextInt(256)));
                firstGeneration =false;
            }
            else if (firstGeneration == false){
                tempData  = existing;
            }
            CellularAutomata ca = new CellularAutomata(canvasWidth, canvasHeight,tempData);
            ca.execute5x5(6);
            tempData = ca.getOutput();
        }
        else if( mode == 7){
            
            NoiseGenerator n = new NoiseGenerator(r.nextInt(5), tempData);
            n.update();
            
            if(firstGeneration == true){
                tempData = n.returnData();
                firstGeneration =false;
            }
            
            else if (firstGeneration == false){
                tempData  = tempData.mergeSystems(n.returnData(), existing);
            }
            
        }
        
        else if(mode == 8){
            tempData = temp;
            tempData.invert();
        }
        else if (mode == 9){
            SymmetrySystem reflect = new SymmetrySystem(SymmetryBox.getSelectedIndex(),temp);
            reflect.update();
            tempData = reflect.returnData();
        }
        else if (mode == 10){
            int rotation = rotationBox.getSelectedIndex() + 14;
            SymmetrySystem reflect = new SymmetrySystem(rotation ,temp);
            reflect.update();
            tempData = reflect.returnData();
        }
        else if (mode == 11){
            int li = Integer.parseInt(linesField.getText());
            int a = Integer.parseInt(AngleField.getText());
            int le = Integer.parseInt(LengthField.getText());
            int s = Integer.parseInt(GrowthField.getText());
            double modifier = Double.parseDouble(ModifierField.getText());
            
            if(modifier > 1.0){
                modifier = 1.0;
            }
            
            LineSystem l = new LineSystem(tempData);
            l.drawLines(li, a, le, s, modifier);
            if(firstGeneration == true){
                tempData =  l.updateData();
                firstGeneration = false;
            }
            else if(firstGeneration == false){
                tempData = tempData.mergeSystems(l.updateData(), existing);
            }
        }
        else if (mode == 12){
            int tileWidth = Integer.parseInt(TileWidthField.getText());
            int tileHeight = Integer.parseInt(TileHeightField.getText());
            int startx = Integer.parseInt(startXField.getText());
            int starty = Integer.parseInt(startYField.getText());
            
            TilingSystem tile = new TilingSystem(temp);
            tempData = tile.generateImage(tileWidth, tileHeight, startx, starty);
        }
        else if (mode == 13){
            int randomizer = RandomizerBox.getSelectedIndex()+ 17;
            SymmetrySystem reflect = new SymmetrySystem(randomizer ,temp);
            reflect.update();
            tempData = reflect.returnData();
        }
        else if (mode == 14){
            int avg = avgBox.getSelectedIndex();
            
            if(avg == 0){
                tempData = existing;
                tempData.smoothEachRow();
            }
            
            if(avg ==1){
                tempData = existing;
                tempData.smoothEachColumn();
            }
            
            if(avg == 2){
                tempData = existing;
                tempData.multiSmooth(30);
            }
        }
        
        return tempData;
    }
    
    
       /**
     * executes the automatically selected algorithm
     * @param mode integer value of selected algorithm
     * @param existing data system 
     * @return the generated algorithm output
     */
    
    public DataSystem autoComputeImage(int mode){
        
        DataSystem tempData = new DataSystem(canvasWidth, canvasHeight);
        Random r = new Random();
        
        
        if(mode == 0){
            RandFormula randF = new RandFormula(tempData);
            randF.updateDS();
            if(firstGeneration == true){
                tempData = randF.returnData();
                firstGeneration =false;
            }
            else if (firstGeneration == false){
                tempData = tempData.mergeSystems(temp, randF.returnData());
            }
        }
        else if (mode == 1){
            RandFormula randF = new RandFormula(tempData);
            randF.updateDSGamma();
            
            if(firstGeneration == true){
                tempData = randF.returnData();
                firstGeneration =false;
            }
            else if (firstGeneration == false){
                tempData = tempData.mergeSystems(temp, randF.returnData());
            }
            
        }
        else if (mode == 2){
            
            if(firstGeneration == true){
                tempData.setSolidColor(new Color(r.nextInt(256),r.nextInt(256),r.nextInt(256)));
                firstGeneration =false;
            }
            else if (firstGeneration == false){
                tempData.setSolidColor(new Color(r.nextInt(256),r.nextInt(256),r.nextInt(256)));
                tempData = tempData.mergeSystems(temp, tempData);
            }
            
            
        }
        else if( mode == 3){
            
            if(firstGeneration == true){
                tempData.setSolidColor(new Color(r.nextInt(256),r.nextInt(256),r.nextInt(256)));
                firstGeneration =false;
            }
            else if (firstGeneration == false){
                tempData  = temp;
            }
            
            CellularAutomata ca = new CellularAutomata(canvasWidth, canvasHeight,tempData);
            ca.executeWolframRand();
            tempData = ca.getOutput();
        }
        
        else if( mode == 5){
            if(firstGeneration == true){
                tempData.setSolidColor(new Color(r.nextInt(256),r.nextInt(256),r.nextInt(256)));
                firstGeneration =false;
            }
            else if (firstGeneration == false){
                tempData  = temp;
            }
            CellularAutomata ca = new CellularAutomata(canvasWidth, canvasHeight,tempData);
            ca.execute2D(100);
            tempData = ca.getOutput();
        }
        else if( mode == 6){
            
            if(firstGeneration == true){
                tempData.setSolidColor(new Color(r.nextInt(256),r.nextInt(256),r.nextInt(256)));
                firstGeneration =false;
            }
            else if (firstGeneration == false){
                tempData  = temp;
            }
            CellularAutomata ca = new CellularAutomata(canvasWidth, canvasHeight,tempData);
            ca.execute5x5(100);
            tempData = ca.getOutput();
        }
        else if( mode == 7){
            
            NoiseGenerator n = new NoiseGenerator(r.nextInt(5), tempData);
            n.update();
            
            if(firstGeneration == true){
                tempData = n.returnData();
                firstGeneration =false;
            }
            
            else if (firstGeneration == false){
                tempData  = tempData.mergeSystems(n.returnData(), temp);
            }
            
        }
        
        else if(mode == 8){
            tempData = temp;
            tempData.invert();
        }
        else if (mode == 9){
            int rotation = r.nextInt(3) + 15;
            SymmetrySystem reflect = new SymmetrySystem(rotation ,temp);
            reflect.update();
            tempData = reflect.returnData();
        }
        else if (mode == 10){
            int li = r.nextInt(1000)+1;
            int a = r.nextInt(360)+1;
            int le = r.nextInt(15)+1;
            int s = r.nextInt(2)+1;
            double modifier = r.nextDouble();
            
            LineSystem l = new LineSystem(tempData);
            
            l.drawLines(li, a, le, s, modifier);
            
            if(firstGeneration == true){
                tempData =  l.updateData();
                firstGeneration = false;
            }
            else if(firstGeneration == false){
                tempData = tempData.mergeSystems(l.updateData(), temp);
            }
            
        }
        else if (mode == 11){
            int tileWidth = r.nextInt(canvasWidth/4)+1;
            int tileHeight = r.nextInt(canvasHeight/4)+1;
            int startx = r.nextInt(canvasWidth/2)+1;
            int starty = r.nextInt(canvasHeight/2)+1;
            
            TilingSystem tile = new TilingSystem(temp);
            tempData = tile.generateImage(tileWidth, tileHeight, startx, starty);
        }
        else if (mode == 12){
            int randomizer = r.nextInt(3)+ 18;
            SymmetrySystem reflect = new SymmetrySystem(randomizer ,temp);
            reflect.update();
            tempData = reflect.returnData();
        }
        
        return tempData;
    }
    
    /**
     * main method created by netbeans
     */
    public static void main(String args[]) {
        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AGPView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AGPView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AGPView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AGPView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AGPView().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem About;
    private java.awt.Label AlgorithmSettngLabel;
    private java.awt.TextField AngleField;
    private javax.swing.JLabel AngleLabel;
    private javax.swing.JMenu File;
    private java.awt.TextField GrowthField;
    private javax.swing.JLabel GrowthLabel;
    private java.awt.TextField LengthField;
    private javax.swing.JLabel LengthLabel;
    private javax.swing.JMenuBar Menu;
    private javax.swing.JMenu Misc;
    private java.awt.TextField ModifierField;
    private javax.swing.JLabel ModifierLabel;
    private javax.swing.JPanel OutputTab;
    private javax.swing.JComboBox<String> RandomizerBox;
    private javax.swing.JPanel SessionTab;
    private javax.swing.JLabel Startx;
    private javax.swing.JComboBox<String> SymmetryBox;
    private javax.swing.JLabel SymmetryLabel;
    private javax.swing.JTabbedPane Tabs;
    private javax.swing.JLabel TileHeight;
    private java.awt.TextField TileHeightField;
    private java.awt.TextField TileWidthField;
    private javax.swing.JLabel about;
    private javax.swing.JLabel about2;
    private javax.swing.JDialog aboutDialog;
    private javax.swing.JComboBox<String> algorithmComboBox;
    private javax.swing.JLabel algorithmLabel;
    private javax.swing.JPanel algorithmSettings;
    private javax.swing.JButton applyAlgorithm;
    private javax.swing.JComboBox<String> avgBox;
    private javax.swing.JLabel avgLabel;
    private javax.swing.JButton beginButton;
    private java.awt.Canvas canvasOutput;
    private javax.swing.JMenuItem clearSessionItem;
    private javax.swing.JMenuItem exitItem;
    private javax.swing.JTextField heightBox;
    private javax.swing.JLabel heightLabel;
    private java.awt.TextField linesField;
    private javax.swing.JLabel linesLabel;
    private javax.swing.JMenuItem loadItem;
    private javax.swing.JLabel numberLinesLabel;
    private javax.swing.JLabel randomizerLabel;
    private javax.swing.JMenuItem redoItem;
    private javax.swing.JComboBox<String> rotationBox;
    private javax.swing.JLabel rotationLabel;
    private javax.swing.JMenuItem saveImageItem;
    private java.awt.ScrollPane scrollPane;
    private javax.swing.JComboBox<String> sessionComboBox;
    private javax.swing.JLabel sessionLabel;
    private java.awt.TextField startXField;
    private java.awt.TextField startYField;
    private java.awt.TextField startingPointsField;
    private javax.swing.JLabel starty;
    private javax.swing.JLabel tileLabel;
    private javax.swing.JLabel tileWidth;
    private javax.swing.JMenuItem undoItem;
    private javax.swing.JTextField widthBox;
    private javax.swing.JLabel widthLabel;
    private javax.swing.JComboBox<String> wolframGridBox;
    private javax.swing.JLabel wolframGridLabel;
    private javax.swing.JLabel wolframLabel;
    private javax.swing.JLabel wolframStartingPoints;
    private java.awt.TextField wolframTextField;
    // End of variables declaration//GEN-END:variables
}
